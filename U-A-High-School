# U.A High School ‚Äì TryHackMe

**Category:** Web Exploitation / Privilege Escalation  
**Difficulty:** Medium  
**Date Solved:** April 2025  

---

## üîç Challenge Overview
The U.A High School CTF was a web-based challenge combined with Linux privilege escalation.  
The goal was to start from a vulnerable PHP application, gain access to the system, and then escalate to root.  
The challenge tested skills in **enumeration, remote code execution, steganography, credential hunting, and privilege escalation through unsafe scripting practices**.

---

## ‚öîÔ∏è My Approach

### 1. Reconnaissance
I began with **nmap scanning**, which revealed two key services running on the target:  
- **SSH (22)**  
- **Apache Web Server (80)**  

This indicated that initial access was most likely through the web service.

---

### 2. Web Enumeration
Using tools like **feroxbuster** and **ffuf**, I discovered hidden pages.  
One interesting file (`/assets/index.php`) had a parameter called `cmd`.  
Testing this showed that it directly executed system commands, which confirmed a **Remote Code Execution (RCE)** vulnerability.

---

### 3. Exploitation
I leveraged the vulnerable `cmd` parameter to run system commands remotely.  
With this access, I delivered a **reverse shell payload** and caught it on my machine, gaining a low-privilege shell as the `www-data` user.

---

### 4. Looting & Hidden Files
Once inside, I explored the system and found hidden content left behind by the challenge creator.  
There were files that contained a base64-encoded passphrase and images with **steganography**.  
By extracting the hidden data from the images, I was able to recover valid credentials for the `deku` user.  
Using these, I logged into the target via SSH and obtained the **user flag**.

---

### 5. Privilege Escalation
After gaining user access, I checked for privilege escalation vectors.  
A custom script was discovered in `/opt/NewComponent/feedback.sh`.  
Although it had some filtering in place, it still used **`eval`**, which is unsafe because it executes input as code.  

By injecting malicious input, I modified the sudoers file, which granted me **full sudo access without a password**.  
From there, I escalated to a root shell and retrieved the **root flag**.

---

## üéØ Key Learnings
- Enumeration is the foundation: thorough scanning uncovered the RCE entry point.  
- Even harmless-looking scripts can be dangerous if they use insecure practices like `eval`.  
- Sensitive information should never be hidden in files (like images with steganography).  
- The principle of least privilege must always be followed, otherwise attackers can easily escalate privileges.  

---

## üõ°Ô∏è Mitigation
If this had been a real system:  
- **Sanitize and validate inputs** strictly, never allowing raw execution through query parameters.  
- Avoid using **`eval`** or similar functions in scripts handling user input.  
- Do not leave sensitive credentials hidden in files or images.  
- Restrict sudo permissions to the absolute minimum required.  

---

## ‚úÖ Outcome
I successfully exploited the U.A High School machine by chaining:  
- Remote Code Execution via an insecure PHP parameter,  
- Steganography for hidden credentials, and  
- Privilege escalation through unsafe script evaluation. 
